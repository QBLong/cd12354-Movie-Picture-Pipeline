name: Frontend Continuous Deployment

on:
  # This allows running on-demand
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      # This will only run on changes to the frontend code
      - "frontend/**"
env:
  NODE_VERSION: 18.x

jobs:
  lint:
    name: Frontend Linting
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            npm-

      - name: Install dependencies
        working-directory: starter/frontend
        run: |
          npm install

      - name: Run ESLint
        working-directory: starter/frontend
        run: |
          npm run lint -- --fix

  test:
    name: Frontend Testing
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        working-directory: starter/frontend
        run: |
          npm install

      - name: Run tests
        working-directory: starter/frontend
        run: |
          npm test

    # Notes for future work and research: How to setup e2e test? Can I add lint check
    # and threw error when lint runs fail

  build:
    name: Build and Push Docker image to AWS ECR
    runs-on: ubuntu-latest
    needs: [lint, test]
    defaults:
      run:
        working-directory: starter/frontend
    steps:
      - name: Checkout code from main branch
        uses: actions/checkout@v3

      - name: Install dependencies for FE
        working-directory: starter/frontend
        run: |
          npm install

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.LONGQB_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.LONGQB_AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.LONGQB_AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Build, Tag, and Push docker image to AWS ECR
        working-directory: starter/frontend
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: latest
        run: |
          aws eks update-kubeconfig --name cluster
          export EXTERNALIP=$(kubectl get svc backend -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}{"\n"}{.status.loadBalancer.ingress[0].ip}')
          echo $EXTERNALIP
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG --build-arg=REACT_APP_MOVIE_API_URL=http://$EXTERNALIP .
          docker images
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Cache Docker image
        uses: actions/cache@v3
        with:
          path: ~/docker-cache
          key: docker-${{ github.sha }}-frontend
          restore-keys: |
            docker-${{ github.sha }}-

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.LONGQB_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.LONGQB_AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.LONGQB_AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name cluster

      - name: Run init.sh
        run: |
          ./init.sh || true
        working-directory: ./setup

      - name: Set Docker image in Kustomize
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: latest
        run: |
          aws eks update-kubeconfig --name cluster --region us-east-1
          kustomize edit set image frontend=$REGISTRY/$REPOSITORY:$IMAGE_TAG
        working-directory: starter/frontend/k8s

      - name: Apply Kubernetes resources
        run: |
          kustomize build | kubectl apply -f --validate=false -
        working-directory: starter/frontend/k8s
