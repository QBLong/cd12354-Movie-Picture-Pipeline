name: Backend Continuous Integration

on:
  # This allows running on-demand
  workflow_dispatch:
  pull_request:
    branches:
      - main
    paths:
      # This will only run on changes to the backend code
      - "backend/**"
  # Get secrets from github repo
  workflow_call:
    secrets:
      LONGQB_AWS_ACCESS_KEY_ID:
        required: true
      LONGQB_AWS_SECRET_ACCESS_KEY:
        required: true
      LONGQB_AWS_SESSION_TOKEN:
        required: true

env:
  PYTHON_VERSION: "3.11.10"

jobs:
  lint:
    name: Backend run lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # - name: Cache pipenv dependencies
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/.cache/pipenv
      #     key: pipenv-${{ runner.os }}-${{ hashFiles('**/Pipfile.lock') }}
      #     restore-keys: |
      #       pipenv-${{ runner.os }}-
      #     run: echo ${{ runner.os }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{env.PYTHON_VERSION}}

      - name: Update pip
        working-directory: starter/backend
        run: python -m pip install --upgrade pip

      - name: Install pipenv
        working-directory: starter/backend
        run: |
          pip install pipenv

      - name: Install dependencies
        working-directory: starter/backend
        run: |
          pipenv install && pip install flake8

      - name: Run lint
        working-directory: starter/backend
        run: |
          pipenv run lint

  test:
    name: Backend run test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{env.PYTHON_VERSION}}

      - name: Install pipenv
        working-directory: starter/backend
        run: |
          pip install pipenv

      - name: Install dependencies
        working-directory: starter/backend
        run: |
          pipenv install

      - name: Run tests
        working-directory: starter/backend
        run: |
          pipenv run test

  # Notes for future work: How can I set aoutomation test and unit test within workflow?
  # How to get code coverage? How can I setup this running on Windows instead of linux
  # (currently having some issues with windows so will research further in the future)

  build:
    name: Build & push image to AWS ECR
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    needs: [lint, test]
    defaults:
      run:
        working-directory: starter/backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{env.PYTHON_VERSION}}

      - name: Install pipenv
        working-directory: starter/backend
        run: |
          pip install pipenv && pip install flake8

      - name: Install dependencies
        working-directory: starter/backend
        run: |
          pipenv install

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.LONGQB_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.LONGQB_AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.LONGQB_AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Build, Tag, and Push docker image
        working-directory: starter/backend
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend
          IMAGE_TAG: latest
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker images

      - name: Cache Docker image
        uses: actions/cache@v3
        with:
          path: ~/docker-cache
          key: docker-${{ github.sha }}-backend
          restore-keys: |
            docker-${{ github.sha }}-
